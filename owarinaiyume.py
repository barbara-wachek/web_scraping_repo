# -*- coding: utf-8 -*-
"""owarinaiyume

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1siRn1AxWXJgwTdykig361Ahr1UQ0f4Pt
"""

!pip install xlsxwriter pydrive

#%% import
from __future__ import unicode_literals
import regex as re
import time
from datetime import datetime
from time import mktime
import requests
from bs4 import BeautifulSoup
from __future__ import unicode_literals
import requests
from bs4 import BeautifulSoup
import pandas as pd
import regex as re
import time
from time import mktime
from tqdm import tqdm  #licznik
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import json
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
import xlsxwriter


#%% functions

#Funkcja zmieniąjąca format daty z "12 października 2002" na "2002-10-12"
def date_change_format_short(date_of_publication):
    date = re.sub(r'(.*\s)(\d{1,2}\s)(.*)(\s\d{4})(\—\s[\w]*\s[\w]*\s[\w]*)', r'\2\3\4', date_of_publication).strip()
    lookup_table = {"stycznia": "01", "lutego": "02", "marca": "03", "kwietnia": "04", "maja": "05", "czerwca": "06", "lipca": "07", "sierpnia": "08", "września": "09", "października": "10", "listopada": "11", "grudnia": "12"}
    for k, v in lookup_table.items():
        date = date.replace(k, v)

    result = time.strptime(date, "%d %m %Y")
    changed_date = datetime.fromtimestamp(mktime(result))
    new_date = format(changed_date.date())
    return new_date

#Funkcja zmieniąjąca format daty z "wtorek, 12 października 2002" na "2002-10-12"
def date_change_format_long(date_of_publication):
    date = re.sub(r'(.*\,\s)(\d{1,2}\s)(.*)(\s\d{4})', r'\2\3\4', date_of_publication).strip()
    lookup_table = {"stycznia": "01", "lutego": "02", "marca": "03", "kwietnia": "04", "maja": "05", "czerwca": "06", "lipca": "07", "sierpnia": "08", "września": "09", "października": "10", "listopada": "11", "grudnia": "12"}
    for k, v in lookup_table.items():
        date = date.replace(k, v)

    result = time.strptime(date, "%d %m %Y")
    changed_date = datetime.fromtimestamp(mktime(result))
    new_date = format(changed_date.date())
    return new_date

def get_sitemap_links(sitemap_link):
    html_text = requests.get(sitemap_link).text
    soup = BeautifulSoup(html_text, "html.parser")
    links = [x.text for x in soup.find_all('loc')]
    return links


def dictionary_of_article(article_link):


    r = requests.get(article_link)
    html_text = r.text
    while '429 Too Many Requests' in html_text:
        time.sleep(5)
        html_text = requests.get(article_link).text
    soup = BeautifulSoup(html_text, 'lxml')
    try:
      date_of_publication = soup.find('time', class_='entry-date published').text.strip()
      date_of_publication = date_change_format_short(date_of_publication)
    except:
      date_of_publication = "no date"
    raw_text = x.find("div", class_= "entry-content")
    try:
        text = soup.find("div", class_= "entry-content").text.strip().replace('\n', ' ').replace('\xa0', ' ')
        author = soup.find('a', class_='url fn n').text.strip()
        title = x.find('h1', class_='entry-title').text
        tags = '|'.join(set([e.text for e in soup.find_all('a', {'rel': 'tag'})]))

        try:
            external_links = ' | '.join([x for x in [x['href'] for x in raw_text.find_all('a')] if not re.findall(r'wordpress', x)])
        except (AttributeError, KeyError, IndexError):
            external_links = None

        try:
            photos_links = ' | '.join([x['src'] for x in raw_text.find_all('img')])
        except (AttributeError, KeyError, IndexError):
            photos_links = None

        dictionary_of_article = {"Link": article_link,
                                 "Data publikacji": date_of_publication,
                                 "Tytuł artykułu": title.replace('\xa0', ' '),
                                 "Tekst artykułu": text,
                                 "Autor": author,
                                 "Tagi": tags,
                                 # "Kategoria": category,
                                 'Linki zewnętrzne': external_links,
                                 'Zdjęcia/Grafika': True if [x['src'] for x in raw_text.find_all('img') if 'src' in x.attrs] else False,
                                 'Filmy': True if [x['src'] for x in raw_text.find_all('iframe')] else False,
                                 'Linki do zdjęć': photos_links
                                 }

        all_results.append(dictionary_of_article)
    except AttributeError:
        errors.append(article_link)

sitemap_links = get_sitemap_links("https://owarinaiyume.wordpress.com/sitemap.xml")
all_results = []
errors = []
with ThreadPoolExecutor() as excecutor:
    list(tqdm(excecutor.map(dictionary_of_article, sitemap_links),total=len(sitemap_links)))
with open(f'owarinaiyume_{datetime.today().date()}.json', 'w', encoding='utf-8') as f:
    json.dump(all_results, f, ensure_ascii=False, default=str)
df = pd.DataFrame(all_results)
with pd.ExcelWriter(f"owarinaiyume_{datetime.today().date()}.xlsx", engine='xlsxwriter', engine_kwargs={'options': {'strings_to_urls': False}}) as writer:
    df.to_excel(writer, 'Posts', index=False)
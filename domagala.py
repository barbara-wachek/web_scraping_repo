# -*- coding: utf-8 -*-
"""domagala

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ilcJFiqs4h71uumz4OEZBQd6ZuZKHfF1
"""

!pip install xlsxwriter

#%% import
from __future__ import unicode_literals
import regex as re
import time
from datetime import datetime
from time import mktime
import requests
from bs4 import BeautifulSoup
from __future__ import unicode_literals
import requests
from bs4 import BeautifulSoup
import pandas as pd
import regex as re
import time
from time import mktime
from tqdm import tqdm  #licznik
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import json
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
import xlsxwriter
import pandas as pd

def date_change_format_short(date_of_publication):
    date = re.sub(r'(.*\s)(\d{1,2}\s)(.*)(\s\d{4})(\—\s[\w]*\s[\w]*\s[\w]*)', r'\2\3\4', date_of_publication).strip()
    lookup_table = {"stycznia": "01", "lutego": "02", "marca": "03", "kwietnia": "04", "maja": "05", "czerwca": "06", "lipca": "07", "sierpnia": "08", "września": "09", "października": "10", "listopada": "11", "grudnia": "12"}
    for k, v in lookup_table.items():
        date = date.replace(k, v)

    result = time.strptime(date, "%d %m %Y")
    changed_date = datetime.fromtimestamp(mktime(result))
    new_date = format(changed_date.date())
    return new_date

#22 pages
main_url = "https://domagalasiekultury.pl/page/"
all_links = []
pattern = r"\d{4}/\d{2}/\d{2}"


for i in range(23):
  url = f"{main_url}{i}"
  response = requests.get(url)
  soup = BeautifulSoup(response.text, 'html.parser')
  for link in soup.find_all('a'):
      all_links.append(link.get('href'))


article_links = [link for link in all_links if re.search(pattern, link)]
article_links = list(set(article_links))

soup

def dictionary_of_article(article_link):

    r = requests.get(article_link)
    html_text = r.text
    while '429 Too Many Requests' in html_text:
        time.sleep(10)
        html_text = requests.get(article_link).text
    soup = BeautifulSoup(html_text, 'html.parser')
    try:
      title_of_article = soup.find('h1', class_='entry-title').get_text(strip=True)
    except:
      title_of_article = None
    try:
      date_of_publication = soup.find('time', class_='entry-date')['datetime']
      date_of_publication = date_change_format_short(date_of_publication)
    except:
      date_of_publication = None
    try:
      text_of_article = soup.find('div', class_='entry-content').text.strip().replace('\n', ' ').replace('\xa0', ' ')
    except:
      text_of_article = None

    try:
      tags_all = soup.find('span', class_='tag-links').find_all('a', rel='tag')
      tags = '|'.join(tag.get_text() for tag in tags_all)
    except:
      tags = None
    try:
      external_links = '|'.join(set([e.text for e in soup.find_all('div', class_='entry-content') if 'http' in e.get('href', '')]))
    except:
      external_links = None

    try:
        photos_links = '|'.join([img.get('src') for img in soup.find_all('img') if img.get('src')])
    except (AttributeError, KeyError, IndexError):
        photos_links = None

    try:
        videos_links = '|'.join([img.get('src') for img in soup.find_all('iframe') if img.get('src')])
    except (AttributeError, KeyError, IndexError):
        videos_links = None

    dictionary_of_article = {"Link": article_link,
                              "Data publikacji": date_of_publication,
                              "Tytuł artykułu": title_of_article,
                              "Tekst artykułu": text_of_article,
                              "Autor": "Tomasz Domagała",
                              "Tagi": tags,
                              "Kategoria": "artykuł",
                              'Linki zewnętrzne': external_links,
                              'Zdjęcia/Grafika': True if photos_links else False,
                              'Filmy': True if videos_links else False,
                              'Linki do zdjęć': photos_links
                              }

    all_results.append(dictionary_of_article)


all_results = []
errors = []
with ThreadPoolExecutor() as excecutor:
    list(tqdm(excecutor.map(dictionary_of_article, article_links),total=len(article_links)))
with open(f'domagala{datetime.today().date()}.json', 'w', encoding='utf-8') as f:
    json.dump(all_results, f, ensure_ascii=False, default=str)
df = pd.DataFrame(all_results)
df["Data publikacji"] = pd.to_datetime(df["Data publikacji"]).dt.date
df = df.sort_values('Data publikacji', ascending=False)
df = df.drop_duplicates(subset = ["Tytuł artykułu"])
with pd.ExcelWriter(f"domagala{datetime.today().date()}.xlsx", engine='xlsxwriter', engine_kwargs={'options': {'strings_to_urls': False}}) as writer:
    df.to_excel(writer, 'Posts', index=False)
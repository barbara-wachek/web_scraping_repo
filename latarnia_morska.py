# -*- coding: utf-8 -*-
"""latarnia_morska

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TT7c56JTCqOP7whj5sTZJBX1y3Gitp9B
"""

!pip install xlsxwriter

from __future__ import unicode_literals
import regex as re
import time
from datetime import datetime
from time import mktime
import requests
from bs4 import BeautifulSoup
from __future__ import unicode_literals
import requests
from bs4 import BeautifulSoup
import pandas as pd
import regex as re
import time
from time import mktime
from tqdm import tqdm  #licznik
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import json
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
import xlsxwriter

#Funkcja zmieniąjąca format daty z "12 października 2002" na "2002-10-12"
def date_change_format_short(date_of_publication):
    date = re.sub(r'(.*\s)(\d{1,2}\s)(.*)(\s\d{4})(\—\s[\w]*\s[\w]*\s[\w]*)', r'\2\3\4', date_of_publication).strip()
    lookup_table = {"styczeń": "01", "luty": "02", "marzec": "03", "kwiecień": "04", "maj": "05", "czerwiec": "06", "lipiec": "07", "sierpień": "08", "wrzesień": "09", "październik": "10", "listopad": "11", "grudzień": "12"}
    for k, v in lookup_table.items():
        date = date.replace(k, v)

    result = time.strptime(date, "%d %m %Y")
    changed_date = datetime.fromtimestamp(mktime(result))
    new_date = format(changed_date.date())
    return new_date

#Funkcja zmieniąjąca format daty z "wtorek, 12 października 2002" na "2002-10-12"
def date_change_format_long(date_of_publication):
    date = re.sub(r'(.*\,\s)(\d{1,2}\s)(.*)(\s\d{4})', r'\2\3\4', date_of_publication).strip()
    lookup_table = {"styczeń": "01", "luty": "02", "marzec": "03", "kwiecień": "04", "maj": "05", "czerwiec": "06", "lipiec": "07", "sierpień": "08", "wrzesień": "09", "październik": "10", "listopad": "11", "grudzień": "12"}
    for k, v in lookup_table.items():
        date = date.replace(k, v)

    result = time.strptime(date, "%d %m %Y")
    changed_date = datetime.fromtimestamp(mktime(result))
    new_date = format(changed_date.date())
    return new_date

def dictionary_of_article(article_link):

    r = requests.get(article_link)
    html_text = r.text
    while '429 Too Many Requests' in html_text:
        time.sleep(5)
        html_text = requests.get(article_link).text
    soup = BeautifulSoup(html_text, 'lxml')
    try:
      date_of_publication = soup.find('span', class_='published').get_text(strip=True).replace('Opublikowano:', '').strip()
      date_of_publication = date_of_publication.split(", ")[1]
      date_of_publication = date_change_format_long(date_of_publication)
    except:
      date_of_publication = "no date"
    text_of_article = soup.find('div', class_="item-page")
    author = soup.find('strong')
    article = soup.find('div', class_="item-page").text.strip().replace('\n', ' ').replace('\xa0', ' ').replace('\t', ' ').replace('\r', ' ').replace('   ', ' ').replace('  ', ' ').replace("Poprzedni artykuł  Następny artykuł", "")
    try:
        title_of_article = soup.find('h1', class_='item-page-title').text.strip()
        tags = None
        try:
            external_links = ' | '.join([x for x in [x['href'] for x in text_of_article.find_all('a')] if not re.findall(r'/pl/', x)])
        except (AttributeError, KeyError, IndexError):
            external_links = None

        try:
            photos_links = ' | '.join([x['src'] for x in text_of_article.find_all('img')])
        except (AttributeError, KeyError, IndexError):
            photos_links = None

        dictionary_of_article = {"Link": article_link,
                                 "Data publikacji": date_of_publication,
                                 "Tytuł artykułu": title_of_article,
                                 "Tekst artykułu": article,
                                 "Autor": "",
                                 "Tagi": tags,
                                 "Kategoria": None,
                                 'Linki zewnętrzne': external_links,
                                 'Zdjęcia/Grafika': True if [x['src'] for x in text_of_article.find_all('img') if 'src' in x.attrs] else False,
                                 'Filmy': True if [x['src'] for x in text_of_article.find_all('iframe')] else False,
                                 'Linki do zdjęć': photos_links
                                 }

        all_results.append(dictionary_of_article)
    except AttributeError:
        errors.append(article_link)

all_links = []
counter = 0
while counter < 1792:
  html_text = requests.get(f"https://www.latarnia-morska.eu/pl/?start={counter}").text
  soup = BeautifulSoup(html_text, 'lxml')
  links = [f"https://www.latarnia-morska.eu/{element.find('a')['href']}" for element in soup.find_all('h2', class_='item-page-title')]
  all_links.extend(links)
  links = []
  counter += 5
  print(counter)

all_results = []
errors = []
with ThreadPoolExecutor() as excecutor:
    list(tqdm(excecutor.map(dictionary_of_article, all_links),total=len(all_links)))
with open(f'latarnia_morska{datetime.today().date()}.json', 'w', encoding='utf-8') as f:
    json.dump(all_results, f, ensure_ascii=False, default=str)
df = pd.DataFrame(all_results)
df["Data publikacji"] = pd.to_datetime(df["Data publikacji"]).dt.date
df = df.sort_values('Data publikacji', ascending=False)
with pd.ExcelWriter(f"latarnia_morska{datetime.today().date()}.xlsx", engine='xlsxwriter', engine_kwargs={'options': {'strings_to_urls': False}}) as writer:
    df.to_excel(writer, 'Posts', index=False)